datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  TestResult TestResult[]
  Test       Test[]
  JobOffer   JobOffer[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// New JobOffer model
model JobOffer {
  id             String       @id @default(cuid())
  jobTitle       String
  jobDescription String
  company        String
  location       String
  salaryRange    String
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Test           Test[]
  TestResult     TestResult[]
}

model Test {
  id         String     @id @default(cuid())
  title      String
  jobOfferId String
  jobOffer   JobOffer   @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions  Question[] // Relation to Question model
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Question {
  id            String   @id @default(cuid())
  description   String
  answer1       String
  answer2       String
  answer3       String
  answer4       String
  correctAnswer Int
  testId        String
  test          Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TestResult {
  id             String   @id @default(cuid())
  jobOfferId     String
  userId         String
  correctAnswers Int
  totalQuestions Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  jobOffer JobOffer @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
